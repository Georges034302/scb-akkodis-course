#!/usr/bin/env bash
# Session 7 Landing Zone - Common setup & cleanup
# Safe, idempotent, and CI-friendly
set -euo pipefail
IFS=$'\n\t'

# -------- Config (overridable via env vars) --------
SUBSCRIPTION_ID="${SUBSCRIPTION_ID:-}"            # If set, we'll switch to it after login
LOCATION="${LOCATION:-australiaeast}"
RESOURCE_GROUP="${RG:-rg-migrate-demo}"
VNET_NAME="${VNET:-vnet-migrate}"
SUBNET_NAME="${SUBNET:-subnet-migrate}"
ADDR_SPACE="${ADDR_SPACE:-10.10.0.0/16}"
SUBNET_PREFIX="${SUBNET_PREFIX:-10.10.1.0/24}"
TAGS="${TAGS:-workshop=session7}"                 # space-separated key=value pairs
CREATE_NSG="${CREATE_NSG:-true}"                  # true|false
NSG_NAME="${NSG_NAME:-nsg-migrate}"
SSH_SOURCE="${SSH_SOURCE:-0.0.0.0/0}"             # "auto" to detect your /32

HANDOFF_FILE="${HANDOFF_FILE:-liftshift/.lab.env}"

# Ensure the handoff file is git-ignored
if [ -d "$(dirname "$HANDOFF_FILE")" ]; then
  GITIGNORE_FILE="$(dirname "$HANDOFF_FILE")/.gitignore"
  HANDOFF_BASENAME="$(basename "$HANDOFF_FILE")"
  if ! grep -qxF "$HANDOFF_BASENAME" "$GITIGNORE_FILE" 2>/dev/null; then
    echo "$HANDOFF_BASENAME" >> "$GITIGNORE_FILE"
  fi
fi

trap 'echo "‚ùå Error on line $LINENO. Exiting."; exit 1' ERR

# -------- Helpers --------
need_az() {
  command -v az >/dev/null 2>&1 || { echo "Azure CLI (az) not found. Install it first."; exit 1; }
}

ensure_login() {
  az account show >/dev/null 2>&1 || { echo "Please run: $0 login"; exit 1; }
}

az_defaults() {
  az configure --defaults location="${LOCATION}" group="${RESOURCE_GROUP}" >/dev/null
  az config set extension.use_dynamic_install=yes_without_prompt >/dev/null
  az version | head -n 1
}

resolve_ssh_source() {
  if [[ "${SSH_SOURCE}" == "auto" ]]; then
    if command -v curl >/dev/null 2>&1; then
      local ip; ip="$(curl -s https://ifconfig.me || true)"
      if [[ -n "${ip}" ]]; then SSH_SOURCE="${ip}/32"; fi
    fi
  fi
}

exists_rg()    { az group exists -n "${RESOURCE_GROUP}" | grep -q true; }
exists_vnet()  { az network vnet show -n "${VNET_NAME}" -g "${RESOURCE_GROUP}" >/dev/null 2>&1; }
exists_subnet(){ az network vnet subnet show -n "${SUBNET_NAME}" -g "${RESOURCE_GROUP}" --vnet-name "${VNET_NAME}" >/dev/null 2>&1; }
exists_nsg()   { az network nsg show -n "${NSG_NAME}" -g "${RESOURCE_GROUP}" >/dev/null 2>&1; }
rule_present() { az network nsg rule show -g "${RESOURCE_GROUP}" --nsg-name "${NSG_NAME}" -n allow-ssh >/dev/null 2>&1; }

write_handoff() {
  cat > "${HANDOFF_FILE}" <<EOF
# Generated by env.sh
export LOCATION=${LOCATION}
export RG=${RESOURCE_GROUP}
export VNET=${VNET_NAME}
export SUBNET=${SUBNET_NAME}
export NSG_NAME=${NSG_NAME}
export SUBSCRIPTION_ID=$(az account show --query id -o tsv)
export VNET_ID=$(az network vnet show -g "${RESOURCE_GROUP}" -n "${VNET_NAME}" --query id -o tsv)
export SUBNET_ID=$(az network vnet subnet show -g "${RESOURCE_GROUP}" --vnet-name "${VNET_NAME}" -n "${SUBNET_NAME}" --query id -o tsv)
$( [[ "${CREATE_NSG}" == "true" ]] && echo "export NSG_ID=$(az network nsg show -g "${RESOURCE_GROUP}" -n "${NSG_NAME}" --query id -o tsv)" )
EOF
  echo "üìÑ Wrote hand-off file: ${HANDOFF_FILE}"
  echo "   Use: source ${HANDOFF_FILE}"
}

verify_provisioned() {
  az group show -n "${RESOURCE_GROUP}" --query "properties.provisioningState" -o tsv | grep -qx "Succeeded"
  az network vnet show -g "${RESOURCE_GROUP}" -n "${VNET_NAME}" --query "provisioningState" -o tsv | grep -qx "Succeeded"
  az network vnet subnet show -g "${RESOURCE_GROUP}" --vnet-name "${VNET_NAME}" -n "${SUBNET_NAME}" --query "provisioningState" -o tsv | grep -qx "Succeeded"
  if [[ "${CREATE_NSG}" == "true" ]]; then
    az network nsg show -g "${RESOURCE_GROUP}" -n "${NSG_NAME}" --query "provisioningState" -o tsv | grep -qx "Succeeded"
  fi
}

# -------- Commands --------
login() {
  need_az

  if az account show >/dev/null 2>&1; then
    echo "‚úÖ Already logged into Azure."
  else
    echo "Logging in to Azure (device code)..."
    az login --use-device-code -o none
  fi

  if [[ -n "${SUBSCRIPTION_ID}" ]]; then
    echo "Setting subscription: ${SUBSCRIPTION_ID}"
    az account set --subscription "${SUBSCRIPTION_ID}" -o none
  fi

  echo "Active subscription:"
  az account show --query '{name:name, id:id}' -o table
  az_defaults
}

init() {
  need_az; ensure_login; az_defaults; resolve_ssh_source

  echo "Config:"
  echo "  LOCATION=${LOCATION}"
  echo "  RG=${RESOURCE_GROUP}"
  echo "  VNET=${VNET_NAME}  SUBNET=${SUBNET_NAME}"
  echo "  CIDRs: ${ADDR_SPACE} / ${SUBNET_PREFIX}"
  echo "  TAGS='${TAGS}'"
  echo "  NSG=${CREATE_NSG}  SSH_SOURCE=${SSH_SOURCE}"

  # Resource Group
  if exists_rg; then
    echo "RG '${RESOURCE_GROUP}' already exists ‚úî"
  else
    echo "Creating resource group '${RESOURCE_GROUP}'..."
    az group create -n "${RESOURCE_GROUP}" -l "${LOCATION}" --tags ${TAGS} -o none
  fi

  # VNet + Subnet (first create sets address spaces; later runs skip)
  if exists_vnet; then
    echo "VNet '${VNET_NAME}' exists ‚úî (skipping create)"
  else
    echo "Creating VNet '${VNET_NAME}' and subnet '${SUBNET_NAME}'..."
    az network vnet create \
      -g "${RESOURCE_GROUP}" -n "${VNET_NAME}" \
      --address-prefixes "${ADDR_SPACE}" \
      --subnet-name "${SUBNET_NAME}" \
      --subnet-prefixes "${SUBNET_PREFIX}" \
      --tags ${TAGS} -o none
  fi

  # Subnet ensure (in case VNet exists without the subnet)
  if exists_subnet; then
    echo "Subnet '${SUBNET_NAME}' exists ‚úî"
  else
    echo "Creating subnet '${SUBNET_NAME}'..."
    az network vnet subnet create \
      -g "${RESOURCE_GROUP}" --vnet-name "${VNET_NAME}" -n "${SUBNET_NAME}" \
      --address-prefixes "${SUBNET_PREFIX}" \
      --tags ${TAGS} -o none
  fi

  # NSG + rule + association (optional)
  if [[ "${CREATE_NSG}" == "true" ]]; then
    if exists_nsg; then
      echo "NSG '${NSG_NAME}' exists ‚úî"
    else
      echo "Creating NSG '${NSG_NAME}'..."
      az network nsg create -g "${RESOURCE_GROUP}" -n "${NSG_NAME}" --tags ${TAGS} -o none
    fi

    if rule_present; then
      echo "NSG rule 'allow-ssh' exists ‚úî (updating source/priority if needed)"
      az network nsg rule update \
        -g "${RESOURCE_GROUP}" --nsg-name "${NSG_NAME}" -n allow-ssh \
        --priority 1000 --access Allow --protocol Tcp --direction Inbound \
        --source-address-prefixes "${SSH_SOURCE}" --destination-port-ranges 22 -o none
    else
      echo "Creating NSG rule 'allow-ssh'..."
      az network nsg rule create \
        -g "${RESOURCE_GROUP}" --nsg-name "${NSG_NAME}" -n allow-ssh \
        --priority 1000 --access Allow --protocol Tcp --direction Inbound \
        --source-address-prefixes "${SSH_SOURCE}" --destination-port-ranges 22 -o none
    fi

    echo "Associating NSG to subnet..."
    az network vnet subnet update \
      -g "${RESOURCE_GROUP}" --vnet-name "${VNET_NAME}" -n "${SUBNET_NAME}" \
      --network-security-group "${NSG_NAME}" -o none
  fi

  verify_provisioned
  write_handoff
  echo "‚úÖ Environment ready: RG=${RESOURCE_GROUP}, VNet=${VNET_NAME}, Subnet=${SUBNET_NAME}"
}

status() {
  need_az; ensure_login
  echo "üîç Checking environment status..."
  az account show --query '{name:name, id:id}' -o table

  missing=0
  printf "Resource Group '%s': " "${RESOURCE_GROUP}"
  if exists_rg; then echo "‚úÖ"; else echo "‚ùå"; missing=1; fi

  printf "VNet '%s': " "${VNET_NAME}"
  if exists_vnet; then echo "‚úÖ"; else echo "‚ùå"; missing=1; fi

  printf "Subnet '%s': " "${SUBNET_NAME}"
  if exists_subnet; then echo "‚úÖ"; else echo "‚ùå"; missing=1; fi

  if [[ "${CREATE_NSG}" == "true" ]]; then
    printf "NSG '%s': " "${NSG_NAME}"
    if exists_nsg; then echo "‚úÖ"; else echo "‚ùå"; missing=1; fi
  fi

  exit "${missing}"
}

cleanup() {
  need_az; ensure_login
  echo "Deleting resource group '${RESOURCE_GROUP}' (no-wait)..."
  az group delete -n "${RESOURCE_GROUP}" --yes --no-wait
  echo "üßπ Cleanup started."
}

usage() {
  cat <<EOF
Usage: $(basename "$0") {login|init|status|cleanup}

This script prepares only the landing zone (RG, VNet, Subnet, NSG).
VMs are created separately in each lab.

Env vars (optional):
  SUBSCRIPTION_ID     Azure subscription ID to target
  LOCATION            Region (default: australiaeast)
  RG                  Resource group (default: rg-migrate-demo)
  VNET                VNet name (default: vnet-migrate)
  SUBNET              Subnet name (default: subnet-migrate)
  ADDR_SPACE          VNet CIDR (default: 10.10.0.0/16)
  SUBNET_PREFIX       Subnet CIDR (default: 10.10.1.0/24)
  TAGS                Space-separated key=value tags (default: workshop=session7)
  CREATE_NSG          true|false (default: true)
  NSG_NAME            NSG name (default: nsg-migrate)
  SSH_SOURCE          Allowed CIDR for SSH (default: 0.0.0.0/0, or "auto" for your /32)
  HANDOFF_FILE        Output file with resolved IDs (default: .lab.env)
EOF
}

case "${1:-}" in
  login)   login ;;
  init)    init ;;
  status)  status ;;
  cleanup) cleanup ;;
  *)       usage ;;
esac
