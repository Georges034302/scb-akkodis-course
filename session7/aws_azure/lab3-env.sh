#!/usr/bin/env bash
# Session 7 - Lab 3 Environment (AWS -> Azure via Azure Migrate)
# Prepares the TARGET landing zone in Azure for both Lab 3-A (VHD import) and Lab 3-B (Azure Migrate)
# NOTE: This script NO LONGER creates any storage accounts/containers. Follow Lab 3-A for storage steps.
# Safe, idempotent, and CI-friendly
set -euo pipefail
IFS=$'\n\t'

# -------- Config (overridable via env vars) --------
SUBSCRIPTION_ID="${SUBSCRIPTION_ID:-}"

# Target landing zone (single region for both lab variants)
LOCATION="${LOCATION:-australiaeast}"
RG="${RG:-rg-migrate-demo}"
VNET="${VNET:-vnet-migrate}"
SUBNET="${SUBNET:-subnet-migrate}"
ADDR_SPACE="${ADDR_SPACE:-10.10.0.0/16}"
SUBNET_PREFIX="${SUBNET_PREFIX:-10.10.1.0/24}"
CREATE_NSG="${CREATE_NSG:-true}"
NSG_NAME="${NSG_NAME:-nsg-migrate}"

# Azure Migrate: We generally create the project via Portal UI.
MIGRATE_PROJECT_NAME="${MIGRATE_PROJECT_NAME:-aws-migrate-lab}"
CREATE_MIGRATE_PROJECT="${CREATE_MIGRATE_PROJECT:-false}" # set true to attempt ARM create via az resource

# Misc
TAGS="${TAGS:-workshop=session7 lab=lab3}"
SSH_SOURCE="${SSH_SOURCE:-0.0.0.0/0}"  # set to "auto" to lock to your /32 dynamically
HANDOFF_FILE="${HANDOFF_FILE:-lab3/.lab.env}"

trap 'echo "‚ùå Error on line $LINENO. Exiting."; exit 1' ERR

# -------- Helpers --------
need_az() { command -v az >/dev/null 2>&1 || { echo "Azure CLI (az) not found. Install it first."; exit 1; }; }
ensure_login() { az account show >/dev/null 2>&1 || { echo "Please run: $0 login"; exit 1; }; }

az_defaults() {
  az configure --defaults location="${LOCATION}" group="${RG}" >/dev/null
  az config set extension.use_dynamic_install=yes_without_prompt >/dev/null
  az version | head -n 1
}

resolve_ssh_source() {
  if [[ "${SSH_SOURCE}" == "auto" ]]; then
    if command -v curl >/dev/null 2>&1; then
      local ip; ip="$(curl -s https://ifconfig.me || true)"
      if [[ -n "${ip}" ]]; then SSH_SOURCE="${ip}/32"; fi
    fi
  fi
}

# Existence checks
exists_rg()      { az group exists -n "${RG}" | grep -q true; }
exists_vnet()    { az network vnet show -n "${VNET}" -g "${RG}" >/dev/null 2>&1; }
exists_subnet()  { az network vnet subnet show -n "${SUBNET}" -g "${RG}" --vnet-name "${VNET}" >/dev/null 2>&1; }
exists_nsg()     { az network nsg show -n "${NSG_NAME}" -g "${RG}" >/dev/null 2>&1; }
rule_present()   { az network nsg rule show -g "${RG}" --nsg-name "${NSG_NAME}" -n allow-ssh >/dev/null 2>&1; }

write_handoff() {
  mkdir -p "$(dirname "${HANDOFF_FILE}")"
  cat > "${HANDOFF_FILE}" <<EOF
# Generated by lab3-env.sh
export LOCATION=${LOCATION}
export RG=${RG}
export VNET=${VNET}
export SUBNET=${SUBNET}
export NSG_NAME=${NSG_NAME}
export SUBSCRIPTION_ID=$(az account show --query id -o tsv)
export VNET_ID=$(az network vnet show -g "${RG}" -n "${VNET}" --query id -o tsv)
export SUBNET_ID=$(az network vnet subnet show -g "${RG}" --vnet-name "${VNET}" -n "${SUBNET}" --query id -o tsv)
$( [[ "${CREATE_NSG}" == "true" ]] && echo "export NSG_ID=$(az network nsg show -g \"${RG}\" -n \"${NSG_NAME}\" --query id -o tsv)" )
EOF
  echo "üìÑ Wrote hand-off file: ${HANDOFF_FILE}"
  echo "   Use: source ${HANDOFF_FILE}"
}

maybe_create_migrate_project() {
  if [[ "${CREATE_MIGRATE_PROJECT}" != "true" ]]; then
    echo "‚ÑπÔ∏è Skipping Azure Migrate project creation (CREATE_MIGRATE_PROJECT=false). Create it in the Portal if needed."
    return 0
  fi
  echo "Attempting to create Azure Migrate project '${MIGRATE_PROJECT_NAME}' in '${RG}' (${LOCATION})..."
  # Azure Migrate project ARM type: Microsoft.Migrate/migrateProjects (api-version varies; using 2019-10-01 as common older version)
  # Note: If this fails due to API version/permissions, create the project via Portal.
  az resource create \
    --resource-group "${RG}" \
    --name "${MIGRATE_PROJECT_NAME}" \
    --resource-type "Microsoft.Migrate/migrateProjects" \
    --properties '{}' \
    --location "${LOCATION}" \
    --api-version "2019-10-01" \
    -o none || echo "‚ö†Ô∏è Could not create migrate project via CLI. Create it via Portal instead."
}

# -------- Commands --------
login() {
  need_az
  if az account show >/dev/null 2>&1; then
    echo "‚úÖ Already logged into Azure."
  else
    echo "Logging in to Azure (device code)..."
    az login --use-device-code -o none
  fi
  if [[ -n "${SUBSCRIPTION_ID}" ]]; then
    echo "Setting subscription: ${SUBSCRIPTION_ID}"
    az account set --subscription "${SUBSCRIPTION_ID}" -o none
  fi
  echo "Active subscription:"
  az account show --query '{name:name, id:id}' -o table
  az_defaults
}

init() {
  need_az; ensure_login; resolve_ssh_source; az_defaults

  echo "== Target landing zone configuration =="
  echo "  RG=${RG}  VNET=${VNET}  SUBNET=${SUBNET}  NSG=${NSG_NAME}  LOCATION=${LOCATION}"
  echo "  TAGS='${TAGS}'  SSH_SOURCE=${SSH_SOURCE}"
  echo "  NOTE: Storage accounts/containers are NOT created here; follow Lab 3-A for those steps."

  # Resource Group
  if exists_rg; then
    echo "RG '${RG}' exists ‚úî"
  else
    echo "Creating RG '${RG}'..."
    az group create -n "${RG}" -l "${LOCATION}" --tags ${TAGS} -o none
  fi

  # VNet + Subnet
  if exists_vnet; then
    echo "VNet '${VNET}' exists ‚úî"
  else
    echo "Creating VNet '${VNET}' and subnet '${SUBNET}'..."
    az network vnet create \
      -g "${RG}" -n "${VNET}" \
      --address-prefixes "${ADDR_SPACE}" \
      --subnet-name "${SUBNET}" \
      --subnet-prefixes "${SUBNET_PREFIX}" \
      --tags ${TAGS} -o none
  fi
  if exists_subnet; then
    echo "Subnet '${SUBNET}' exists ‚úî"
  else
    echo "Creating subnet '${SUBNET}'..."
    az network vnet subnet create \
      -g "${RG}" --vnet-name "${VNET}" -n "${SUBNET}" \
      --address-prefixes "${SUBNET_PREFIX}" \
      --tags ${TAGS} -o none
  fi

  # NSG + rule + association (optional)
  if [[ "${CREATE_NSG}" == "true" ]]; then
    if exists_nsg; then
      echo "NSG '${NSG_NAME}' exists ‚úî"
    else
      echo "Creating NSG '${NSG_NAME}'..."
      az network nsg create -g "${RG}" -n "${NSG_NAME}" --tags ${TAGS} -o none
    fi

    if rule_present; then
      echo "NSG rule 'allow-ssh' exists ‚úî (ensuring source/priority)"
      az network nsg rule update \
        -g "${RG}" --nsg-name "${NSG_NAME}" -n allow-ssh \
        --priority 1000 --access Allow --protocol Tcp --direction Inbound \
        --source-address-prefixes "${SSH_SOURCE}" --destination-port-ranges 22 -o none
    else
      echo "Creating NSG rule 'allow-ssh'..."
      az network nsg rule create \
        -g "${RG}" --nsg-name "${NSG_NAME}" -n allow-ssh \
        --priority 1000 --access Allow --protocol Tcp --direction Inbound \
        --source-address-prefixes "${SSH_SOURCE}" --destination-port-ranges 22 -o none
    fi

    echo "Associating NSG to subnet..."
    az network vnet subnet update \
      -g "${RG}" --vnet-name "${VNET}" -n "${SUBNET}" \
      --network-security-group "${NSG_NAME}" -o none
  fi

  # Optional: attempt creating Azure Migrate project (still recommended via Portal)
  maybe_create_migrate_project

  write_handoff
  echo "‚úÖ Lab 3 environment ready: RG=${RG}, VNet=${VNET}, Subnet=${SUBNET} (NSG=${CREATE_NSG})"
}

status() {
  need_az; ensure_login
  echo "üîç Checking environment status..."
  az account show --query '{name:name, id:id}' -o table

  missing=0
  printf "Resource Group '%s': " "${RG}";      if exists_rg; then echo "‚úÖ"; else echo "‚ùå"; missing=1; fi
  printf "VNet '%s': " "${VNET}";              if exists_vnet; then echo "‚úÖ"; else echo "‚ùå"; missing=1; fi
  printf "Subnet '%s': " "${SUBNET}";          if exists_subnet; then echo "‚úÖ"; else echo "‚ùå"; missing=1; fi
  if [[ "${CREATE_NSG}" == "true" ]]; then
    printf "NSG '%s': " "${NSG_NAME}";         if exists_nsg; then echo "‚úÖ"; else echo "‚ùå"; missing=1; fi
    printf "SSH rule 'allow-ssh': ";           if rule_present; then echo "‚úÖ"; else echo "‚ùå"; missing=1; fi
  fi

  exit "${missing}"
}

cleanup() {
  need_az; ensure_login
  echo "üßπ Cleanup starting..."

  # Delete the landing zone RG
  if exists_rg; then
    echo "Deleting resource group '${RG}' (no-wait)..."
    az group delete -n "${RG}" --yes --no-wait || true
  fi

  echo "üßπ Cleanup initiated."
}

usage() {
  cat <<EOF
Usage: $(basename "$0") {login|init|status|cleanup}

Prepares Lab 3 (AWS -> Azure) landing zone in a single Azure region:
- Resource Group, VNet/Subnet, and optional NSG (SSH allow) for migrated VMs
- NOTE: Storage accounts/containers are NOT created here; follow Lab 3-A for those steps.
- Optionally attempts to create an Azure Migrate project (or do so in Portal)

Env vars (optional):
  SUBSCRIPTION_ID           Switch subscription after login
  LOCATION                  Default: australiaeast
  RG                        Default: rg-migrate-demo
  VNET                      Default: vnet-migrate
  SUBNET                    Default: subnet-migrate
  ADDR_SPACE                Default: 10.10.0.0/16
  SUBNET_PREFIX             Default: 10.10.1.0/24
  CREATE_NSG                true|false (default: true)
  NSG_NAME                  Default: nsg-migrate
  SSH_SOURCE                CIDR (default: 0.0.0.0/0, or "auto" for your /32)

  MIGRATE_PROJECT_NAME      Default: aws-migrate-lab
  CREATE_MIGRATE_PROJECT    true|false (default: false)

  TAGS                      Space-separated key=value tags (default: "workshop=session7 lab=lab3")
  HANDOFF_FILE              Output file (default: lab3/.lab.env)
EOF
}

case "${1:-}" in
  login)   login ;;
  init)    init ;;
  status)  status ;;
  cleanup) cleanup ;;
  *)       usage ;;
esac
